//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

public class Score
{
	private static Score instance;
	private float currentScoreF;
	private float fullScoreF;
	private float bestScore;
	private int currentMeters;
	private float fullMeters;
	private float baseMeters; //Sum of full meters on start running

	private int currentMult = 1;
	private float startPoint = 0;

		
	public static Score getInstance ()
	{
		if (instance == null) {
			instance = new Score ();
		}
		return instance;
	}

	public Score ()
	{
		fullScoreF = PlayerPrefs.GetFloat ("Score/fullScoreF");
		bestScore = PlayerPrefs.GetFloat ("Score/bestScore");
		fullMeters = PlayerPrefs.GetFloat ("Score/fullMeters");
		baseMeters = PlayerPrefs.GetFloat ("Score/fullMeters");
		this.updateScore (0);
	}

	
	public void setCurrentScoreF (float score)
	{
		currentScoreF = score;
		this.updateScore (0);
	}

	public int getCurrentScoreF ()
	{
		return (int)currentScoreF;
	}
	public int getFullScoreF ()
	{
		return (int)fullScoreF;
	}

	public void updateScore (float additionScore)
	{
		currentScoreF += additionScore * currentMult;
		fullScoreF += additionScore * currentMult;
		currentMult = ((int)Math.Pow (fullScoreF, 0.22f)) - 2;
		if (currentMult < 1)
			currentMult = 1;

		PlayerPrefs.SetFloat ("Score/fullScoreF", fullScoreF);
	}

	public void updateCurrentMeters (float x)
	{
		currentMeters = (int)Math.Round ((x - startPoint) / 3);
		this.updateFullMeters ();
		this.updateBestScore ();
	}

	public void updateFullMeters ()
	{
		fullMeters = baseMeters + currentMeters;
		PlayerPrefs.SetFloat ("Score/fullMeters", fullMeters);
	}
	public void updateBaseMeters(){
		baseMeters += currentMeters;
	}
	public int getCurrentMeters ()
	{
		return (int)currentMeters;
	}
	public int getFullMeters ()
	{
		return (int)fullMeters;
	}

	public int getMult ()
	{
		return currentMult;
	}

	public void setStartPoint (float x)
	{
		startPoint = x;
	}

	public void updateBestScore(  ){
		if ((int)currentScoreF > bestScore) {
			bestScore = (int)currentScoreF;
			PlayerPrefs.SetFloat ("Score/bestScore", bestScore);
		}


	}
	public int getBestScore(){
		return (int)bestScore;
	}

}

